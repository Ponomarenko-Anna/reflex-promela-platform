23.дек.2020 
ТЕКСТ ПРОГРАММЫ УПРАВЛЕНИЯ (добавлены latch processes)
// В качестве демонстрационного примера подходы использована задача автоматизации 
// лифта для маломобильных пользователей (Рис. 1). 
// Лифт представляет собой альтернативу пандусу и предназначен 
// для вертикального перемещения пассажира на кресле-каталке 
// между двумя разновысокими горизонтальным поверхностями, этажами. 
// В состав лифта входит платформа с двумя дверями для каждого 
// из этажей и двигатель. Двери платформы открываются и закрываются вручную. 
// Состояние закрытия дверей регистрируется датчиками 
// (top_door_closed, bot_door_closed). 
// Имеются две кнопки вызова лифта 
// (top_call, bot_call), расположенные на каждом этаже. 
// На самой платформе расположены две кнопки управления перемещением (up_call, down_call). 
// Два датчика (on_top_floor и on_bot_floor) регистрируют нахождение 
// платформы лифта на верхнем и нижнем этаже соответственно.  
// Двигатель вертикального перемещения платформы лифта управляется 
// посредством сигналов up и down.
//https://github.com/a-bastrykina/reflex-translator-diploma/tree/master/examples

program Controller {
	
	clock 0t10ms;
	
// ============================================
// ============ Input signals =================
// ============================================

//	Sensors
	bool on_top_floor; // bool on_top_floor, on_lower_floor; ?
	bool on_bot_floor; 

// Controls
	bool top_call;
	bool bot_call;
	bool up_call;
	bool down_call;
	bool top_door_closed;
	bool bot_door_closed;
	
// ============================================
// ================ Output signals ============
// ============================================

// Indicators
	bool top_call_LED;
	bool bot_call_LED;
	bool up_call_LED;
	bool down_call_LED;
	
// Actuators
	bool up;
	bool down;
	
// ============================================
// ================ Constants ============
// ============================================
//	const float ELEV_ACCEL = 0.25;
//	const float ELEV_MAX_SPEED = 0.5;
//	const float ELEV_DOWN_COORD = 200.0;
	
// ============================================
// ================ Auxiliary signals ============
// ============================================
//	float v; // float v = 100.0; ?
//	float coord;

	process Init { //
		state Begin {	
			start process top_call_Latch;
			start process bot_call_Latch;
			start process up_call_Latch;
			start process down_call_Latch;
			start process Motion;
			stop;				
		}
	}
	process top_call_Latch { //
		bool prev_in;
		bool prev_out;
		
		state Begin {	
			prev_in = !top_call;
			prev_out = !top_door_closed;
			set state check_ON_OFF; // next?				
		}
		state check_ON_OFF looped {	
			if (top_call && !prev_in) // pushing
				top_call_LED = true;
			if (!top_door_closed && prev_out) // opening 
				top_call_LED = false;
			prev_in = top_call;
			prev_out = top_door_closed;
		}
	}
	process bot_call_Latch { //
		bool prev_in;
		bool prev_out;
		
		state Begin {	
			prev_in = !bot_call;
			prev_out = !bot_door_closed;
			set state check_ON_OFF; // next?				
		}
		state check_ON_OFF looped {	
			if (bot_call && !prev_in) // pushing
				bot_call_LED = true;
			if (!bot_door_closed && prev_out) // opening 
				bot_call_LED = false;
			prev_in = bot_call;
			prev_out = bot_door_closed;
		}
	}

	process up_call_Latch { //
		bool prev_in;
		bool prev_out;
		
		state Begin {	
			prev_in = !up_call;
			prev_out = !top_door_closed;
			set state check_ON_OFF; // next?				
		}
		state check_ON_OFF looped {	
			if (up_call && !prev_in) // pushing
				up_call_LED = true;
			if (!top_door_closed && prev_out) // opening 
				up_call_LED = false;
			prev_in = up_call;
			prev_out = top_door_closed;
		}
	}
	process down_call_Latch { //
		bool prev_in;
		bool prev_out;
		
		state Begin {	
			prev_in = !down_call;
			prev_out = !bot_door_closed;
			set state check_ON_OFF; // next?				
		}
		state check_ON_OFF looped {	
			if (down_call && !prev_in) // pushing
				down_call_LED = true;
			if (!bot_door_closed && prev_out) // opening 
				down_call_LED = false;
			prev_in = down_call;
			prev_out = bot_door_closed;
		}
	}

	process Motion { //
		state check_command {	
			if (bot_call_LED) {
				start process go_down;
				set state check_stop;
			}
			else if (top_call_LED) {
				start process go_up;
				set state check_stop;
			}
			else if (down_call_LED) {
				start process go_down;
				set state check_stop;
			}
			else if (up_call_LED) {
				start process go_up;
				set state check_stop;
			}
			timeout (0t20s) {
				start process go_down;
				set state check_stop;
			}  							
		}
		state check_stop {	
			if ((process go_down in state inactive) &&
				(process go_up in state inactive))
				set state check_command; // restart - looped
		}	
	}
	
	process go_down { //
		state motion {
			if (top_door_closed && bot_door_closed) down = true;
			if (on_bot_floor) {
				down = false;
				stop;
			}
		}	
	}
	
	process go_up { //
		state motion {
			if (top_door_closed && bot_door_closed) up = true;
			if (on_top_floor) {
				up = false;
				stop;
			}
		}	
	}
}
		


